<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端工程化与webpack</title>
      <link href="/post/87137f47.html"/>
      <url>/post/87137f47.html</url>
      
        <content type="html"><![CDATA[<p><strong>学习目标：</strong></p><ol><li>理解什么是前端工程化</li><li>了解webpack的基本用法</li><li>知道webpack在项目中的作用</li><li>理解webpack中的核心理念</li></ol><p><strong>前端工程化</strong><br>在企业级的前端开发项目中，把前端开发所需的工具、技术、流程、经验等进行规范化、标准化。</p><ol><li>模块化（js的模块化、css的模块化、资源的模块化）</li><li>组件化（复用吸纳有的UI结构、样式、行为）</li><li>规范化（目录结构的划分、编码规范化、接口规范化、文档规范化、Git分支管理）</li><li>自动化（自动化构建、自动部署、自动化测试）</li></ol><h1 id="webpack的基本使用"><a href="#webpack的基本使用" class="headerlink" title="webpack的基本使用"></a>webpack的基本使用</h1><p>概念：webpack是前端工程化的具体解决方案。</p><p>主要功能：提供了友好的前端模块化开发支持，以及代码压缩混淆、处理浏览器端JavaScript的兼容性、性能优化等强大功能。</p><h2 id="在项目中安装webpack"><a href="#在项目中安装webpack" class="headerlink" title="在项目中安装webpack"></a>在项目中安装webpack</h2><p>在终端中运行如下命令，安装webpack相关的两个包：</p><p><code>npm install webpack webpack-cli -D</code></p><ul><li><strong>-S 是 –save 的简写</strong></li><li><strong>-D 是 –save–dev 的简写</strong></li></ul><h2 id="在项目中配置webpack"><a href="#在项目中配置webpack" class="headerlink" title="在项目中配置webpack"></a>在项目中配置webpack</h2><p>1.在项目根目录中，创建名为webpack.config.js的webpack配置文件，并初始化如下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">mode:&#x27;development&#x27; // mode 用来指定构建模式，可选值有 development 和 production</span><br><span class="line">// entry:&#x27;指定要处理哪个文件&#x27;</span><br><span class="line">    // entry:path.join(__dirname,&#x27;./src/index.js&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在package.json的scripts节点下，新建dev脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">&quot;dev&quot;:&quot;webpack&quot; // script节点下的脚本，可以通过npm run 执行。例如 npm run dev </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在终端中运行npm run dev命令，启动webpack进行项目的打包构建</p><h2 id="webpack中的默认约定"><a href="#webpack中的默认约定" class="headerlink" title="webpack中的默认约定"></a>webpack中的默认约定</h2><p>在webpack 4.x和5.x中，有如下默认约定：</p><ol><li>默认的打包入口文件为 src –&gt; index.js</li><li>默认的文件输出路径为 dist –&gt; main.js</li></ol><p><strong>注意：可以在webpack.config.js中修改打包的默认约定</strong></p><h2 id="自定义打包的入口与出口"><a href="#自定义打包的入口与出口" class="headerlink" title="自定义打包的入口与出口"></a>自定义打包的入口与出口</h2><p>在webpack.config.js配置文件中，通过entry节点指定打包的入口。通过output节点指定打包的出口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;) //导入node.js中专门操作路径的模块</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry:path.join(__dirname,&#x27;./src/index.js&#x27;), // 打包文件入口路径</span><br><span class="line">  output: &#123;</span><br><span class="line">    path:path.join(__dirname,&#x27;./dist&#x27;), //输出文件存放 </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> Vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器的概念与初识Ajax</title>
      <link href="/post/47f61257.html"/>
      <url>/post/47f61257.html</url>
      
        <content type="html"><![CDATA[<p><strong>目标</strong></p><ol><li>能够知道和服务器相关的概念</li><li>能够知道客户端和服务器通信的过程</li><li>能够知道数据也是一种资源</li><li>能够说出什么是Ajax以及应用场景</li><li>能够使用jQUery中的Ajax函数请求数据</li><li>能够知道接口和接口文档的概念</li></ol><h1 id="客户端与服务器"><a href="#客户端与服务器" class="headerlink" title="客户端与服务器"></a>客户端与服务器</h1><h2 id="上网的目的"><a href="#上网的目的" class="headerlink" title="上网的目的"></a>上网的目的</h2><p>上网的本质目的：通过互联网的方式获取和消费资源</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器##"></a>服务器##</h2><p>上网过程中，负责存放和对外界提供资源的电脑，叫做服务器</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>上网过程中，负责获取和消费资源的电脑，叫做客户端</p><h1 id="URL地址"><a href="#URL地址" class="headerlink" title="URL地址"></a>URL地址</h1><h2 id="URL地址的概念"><a href="#URL地址的概念" class="headerlink" title="URL地址的概念"></a>URL地址的概念</h2><p>URL中文名称为 <strong>统一资源定位符</strong>，用于标识互联网上每个资源的唯一存放位置。浏览器只有通过URL地址，才能正确的定位资源存放的位置，从而成功访问到对应的资源。</p><h2 id="URL地址的组成部分"><a href="#URL地址的组成部分" class="headerlink" title="URL地址的组成部分"></a>URL地址的组成部分</h2><p>URL地址一般由三部分组成：</p><ol><li>客户端与服务器之间的<strong>通信协议</strong></li><li>存有该资源的<strong>服务器名称</strong></li><li>资源在服务器上<strong>具体的局方位置</strong></li></ol><h1 id="分析网页的打开过程"><a href="#分析网页的打开过程" class="headerlink" title="分析网页的打开过程"></a>分析网页的打开过程</h1><ol><li>客户端请求服务器</li><li>服务器处理这次请求</li><li>服务器响应客户端</li></ol><p>客户端</p><ol><li>打开浏览器</li><li>输入要访问的网站地址</li><li>放服务器发起请求</li></ol><p>服务器</p><ol><li>接收到客户端发来的请求</li><li>在内部处理这次请求，找到相关资源</li><li>把找到的资源响应（发送）给客户端</li></ol><p><strong>注意</strong></p><ul><li>客户端与服务器之间的通信过程，分为** 请求-处理-响应 **三个步骤</li><li>网页中的每个资源，都是通过 ** 请求-处理-响应 ** 的方式从服务器获取回来的</li></ul><h1 id="服务器对外提供了那些资源"><a href="#服务器对外提供了那些资源" class="headerlink" title="服务器对外提供了那些资源"></a>服务器对外提供了那些资源</h1><p><strong>数据是网页的灵魂</strong></p><h2 id="资源的请求方式"><a href="#资源的请求方式" class="headerlink" title="资源的请求方式"></a>资源的请求方式</h2><ul><li>get请求常用于获取服务器资源</li><li>post请求常用于向服务器提交数据</li></ul><h1 id="了解Ajax"><a href="#了解Ajax" class="headerlink" title="了解Ajax"></a>了解Ajax</h1><h2 id="什么是Ajax"><a href="#什么是Ajax" class="headerlink" title="什么是Ajax"></a>什么是Ajax</h2><p>Ajax的全称是 Asynchronous Javascript And XML (异步JavaScript和XML)<br>通俗的理解： 在网页中利用XMLHttpReQuest对象和服务器惊醒数据交互的方式，就是Ajax</p><h2 id="学Ajax的目的"><a href="#学Ajax的目的" class="headerlink" title="学Ajax的目的"></a>学Ajax的目的</h2><p>Ajax能让我们轻松实现网页与服务器之间的数据交互</p><h2 id="Ajax的经典应用场景"><a href="#Ajax的经典应用场景" class="headerlink" title="Ajax的经典应用场景"></a>Ajax的经典应用场景</h2><ul><li>用户名检测：注册用户时，通过Ajax的形式，动态检测用户名是否被占用</li><li>搜索提示：当输入关键字时，通过Ajax的形式，动态加载搜索提示列表</li><li>数据分页显示：当点击页码值得时候，通过Ajax的形式，根据页码值动态刷新表格的数据</li><li>数据的增删改查：数据的增删改查操作，通过Ajax的形式，实现数据的交互</li></ul><h1 id="jQuery中的Ajax"><a href="#jQuery中的Ajax" class="headerlink" title="jQuery中的Ajax"></a>jQuery中的Ajax</h1><h2 id="了解jQuery中的ajax"><a href="#了解jQuery中的ajax" class="headerlink" title="了解jQuery中的ajax"></a>了解jQuery中的ajax</h2><p>浏览器中提供的XMLHTTPRequest用法比较复杂，所以jQuery对XMLHTTPRequest进行了封装，提供了一系列Ajax相关的函数，极大地降低了Ajax的难度</p><p>JQuery中发起Ajax请求最常用的三个方法如下：</p><ul><li>$.get()</li><li>$.post()</li><li>$.ajax()</li></ul><h2 id="get-函数的语法"><a href="#get-函数的语法" class="headerlink" title="$.get()函数的语法"></a>$.get()函数的语法</h2><p>jQuery中$.get()函数的功能单一，专门用来发起get请求，从而将服务器上的资源请求到客户端来进行使用。<br>$.get()的语法如下：</p><pre><code>$.get(url,[data],[callback])</code></pre><p>其中三个参数意义如下：</p><ul><li>参数名     参数类型    是否必选   说明</li><li>url        string     是        要请求资源的地址</li><li>data       object     否        请求资源期间携带的参数</li><li>callback   funcation  否        请求成功时的回调函数</li></ul><h2 id="post-函数的语法"><a href="#post-函数的语法" class="headerlink" title="$.post()函数的语法"></a>$.post()函数的语法</h2><p>jQuery中$.post()函数的功能单一，专门用来发起post请求，从而向服务器提交数据。<br>$.post()的语法如下：</p><pre><code>$.post(url,[data],[callback])</code></pre><p>其中三个参数意义如下：</p><ul><li>参数名     参数类型    是否必选   说明</li><li>url        string     是        提交数据的地址</li><li>data       object     否        要提交的数据</li><li>callback   funcation  否        提交成功时的回调函数</li></ul><h2 id="ajax-函数的语法"><a href="#ajax-函数的语法" class="headerlink" title="$.ajax()函数的语法"></a>$.ajax()函数的语法</h2><p>相比于$.get()和$.post()，jQuery中提供的$.ajax()函数是一个功能比较综合的函数，它允许我们对Ajax请求进行更详细的配置。<br>$.ajax()的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type:&#x27;&#x27;, //请求的方式，例如GET或POST</span><br><span class="line">  url:&#x27;&#x27;,  //请求的URL地址</span><br><span class="line">data:&#123;&#125;, //这次请求要携带的数据 </span><br><span class="line">success:funcation(res)&#123;&#125; //请求成功之后的回调函数</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h2><p>使用AJax请求数据是，被请求的URL地址，就叫做<strong>数据接口（简称接口）</strong>。同时，每个接口必须有自己的请求方式。</p><h2 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h2><p>接口怎么使用的接口说明文档</p><h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><ol><li>接口名称</li><li>接口url</li><li>接口的调用方式</li><li>参数的格式</li><li>响应格式</li><li>返回示例</li></ol>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地存储</title>
      <link href="/post/5cb41814.html"/>
      <url>/post/5cb41814.html</url>
      
        <content type="html"><![CDATA[<p><strong>目标：</strong></p><ol><li>能够写出sessionStorge数据的存储以及获取</li><li>能够写出localStorage数据的存储以及获取</li><li>能够说出它们两者的区别</li></ol><h1 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h1><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变得越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案。</p><p><strong>本地存储特性</strong></p><ol><li>数据存储在用户浏览器中</li><li>设置、读取方便、甚至页面刷新不丢失数据</li><li>容量较大，sessionStorage约5M，localStorage约20M</li><li>只能存储字符串，可以将对象JSON.stringify()编码后存储</li></ol><h1 id="window-sessionStorage"><a href="#window-sessionStorage" class="headerlink" title="window.sessionStorage"></a>window.sessionStorage</h1><ol><li>生命周期未关闭浏览器窗口</li><li>在同一个窗口下数据可以共享</li><li>以键值对的形式存储使用</li></ol><p><strong>存储数据</strong></p><pre><code>sessionStroage.setItem(value,key)</code></pre><p><strong>获取数据</strong></p><pre><code>sessionStroage.getItem(key)</code></pre><p><strong>删除数据</strong></p><pre><code>sessionStroage.removeItem(key)</code></pre><p><strong>删除所有数据</strong></p><pre><code>sessionStroage.clear()</code></pre><h1 id="window-localStorage"><a href="#window-localStorage" class="headerlink" title="window.localStorage"></a>window.localStorage</h1><ol><li>生命周期永久生效，除非手动删除，否则页面关闭也会存在</li><li>可以多窗口共享</li><li>以键值对的方式存储使用</li></ol><p><strong>存储数据</strong></p><pre><code>localStorage.setItem(key,value)</code></pre><p><strong>获取数据</strong></p><pre><code>localStorage.getItem(key)</code></pre><p><strong>删除数据</strong></p><pre><code>localStorage.removeItem(key)</code></pre><p><strong>删除所有数据</strong></p><pre><code>localStorage.clear()</code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> JS </tag>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC端网页特效</title>
      <link href="/post/b70e4979.html"/>
      <url>/post/b70e4979.html</url>
      
        <content type="html"><![CDATA[<p><strong>目标</strong></p><ul><li>能够说出常见的offset系列属性的作用</li><li>能够说出常见的client系列属性的作用</li><li>能够说出常见的scroll系列属性的作用</li><li>能够封装简单的动画函数</li><li>能够写出网页轮播图案例</li></ul><h1 id="元素偏移量offset系列"><a href="#元素偏移量offset系列" class="headerlink" title="元素偏移量offset系列"></a>元素偏移量offset系列</h1><p>offset翻译过来就是偏移量，使用offset系列相关属性可以动态的得到该元素的位置（偏移量）、大小等。 <strong>常用于获取元素的位置</strong></p><ul><li>获得元素距离带有定位父元素的位置</li><li>获得元素自身的大小（宽度高度）</li><li>注意：返回的数值都不带单位</li></ul><h2 id="offset系列常用的属性"><a href="#offset系列常用的属性" class="headerlink" title="offset系列常用的属性"></a>offset系列常用的属性</h2><pre><code>element.offsetParent  返回该元素带有定位的父级元素，如果父级都没有定位则返回bodyelement.offsetTop     返回元素相对带有定位父元素是上方的偏移element.offsetLeft    返回元素相对带有定位父元素左边框的偏移element.offsetWidth   返回自身包括padding、边框、内容区的宽度，返回数值不带单位element.offsetHeight  返回自身包括padding、边框、内容区的宽度，返回数值不带单位</code></pre><h2 id="offset和style的区别"><a href="#offset和style的区别" class="headerlink" title="offset和style的区别"></a>offset和style的区别</h2><p><strong>offset</strong></p><ul><li>offset可以得到任意表中的样式值</li><li>offset系列获得的数值是没有单位的</li><li>offsetWidth包含padding+border+width</li><li>offsetWidth等属性是只读属性，只能获取不能赋值</li><li>想要获取元素大小位置，用offset更合适</li></ul><p><strong>style</strong></p><ul><li>style只能获取到行内样式表中的元素值</li><li>style.width获取的是带有单位的字符串</li><li>style.width不包含padding+border</li><li>style.width是可读写属性，既能读取又能赋值</li><li>想要给元素更改值，用style才能更改</li></ul><h1 id="元素可视区client系列"><a href="#元素可视区client系列" class="headerlink" title="元素可视区client系列"></a>元素可视区client系列</h1><p>client翻译过来就是客户端，使用client系列相关的属性来获取元素可视区的相关信息。通过client系列的相关属性可以动态的得到该元素的边框大小、元素大小等。 <strong>常用于获取元素的大小</strong></p><h2 id="client系列属性"><a href="#client系列属性" class="headerlink" title="client系列属性"></a>client系列属性</h2><pre><code>element.clientTop    返回元素上边框大小element.clientLeft   返回元素左边框大小element.clientWidth  返回自身包括padding、内容区的宽度，不含边框，返回数值不带单位element.clientHeight 返回自身包括padding、内容区的高度，不含边框，返回数值不带单位</code></pre><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><p>立即执行函数(funcation(){})()<br>主要作用：创建一个独立的作用域</p><pre><code>    // 1.立即执行函数:不需要调用，立马能够自己执行的函数    // 2.写法    // (function () &#123; &#125;)() 或者 (function()&#123;&#125;())    (function (a, b) &#123;        console.log(a + b);    &#125;)(1, 2);//第二个括号可以看做是调用函数    (function sum(a, b) &#123;        console.log(a + b);    &#125;(2, 3));    // 3.立即执行函数最大的作用就是 独立创建了一个作用域，里面的所有变量都是局部变量，不会有命名冲突</code></pre><h1 id="元素滚动scroll系列"><a href="#元素滚动scroll系列" class="headerlink" title="元素滚动scroll系列"></a>元素滚动scroll系列</h1><p>scroll翻译过来就是滚动，使用scroll系列的相关属性可以动态的得到该元素的大小、滚动距离等。 <strong>常用于获取元素的滚动距离，页面滚动距离通过window.pageXOffset获得</strong></p><h2 id="scroll系列属性"><a href="#scroll系列属性" class="headerlink" title="scroll系列属性"></a>scroll系列属性</h2><pre><code>element.scrollTop    返回被卷去的上侧距离，返回数值不带单位element.scrollLeft   返回被卷去的左侧距离，返回数值不带单位element.scrollWidth  返回自身实际的宽度，不含边框，返回数值不带单位element.scrollHeight 返回自身实际的高度，不含边框，返回数值不带单位</code></pre><h2 id="页面被卷去的头部"><a href="#页面被卷去的头部" class="headerlink" title="页面被卷去的头部"></a>页面被卷去的头部</h2><p>如果浏览器的高（宽）不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏的高度称之为<strong>页面被卷去的头部</strong>。滚动条在滚动时会触发onscroll事件。</p><h1 id="mouseenter和mouseover的区别"><a href="#mouseenter和mouseover的区别" class="headerlink" title="mouseenter和mouseover的区别"></a>mouseenter和mouseover的区别</h1><p><strong>mouseenter鼠标事件</strong></p><ul><li>mouseover鼠标经过自身盒子会触发，经过子盒子还会触发。因为事件冒泡</li><li>mouseenter和mouseleave鼠标经过自身盒子会触发，经过子盒子不会触发。因为事件不冒泡</li></ul><h1 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h1><h2 id="动画实现原理"><a href="#动画实现原理" class="headerlink" title="动画实现原理"></a>动画实现原理</h2><p><strong>核心原理：通过定时器setInterval()不断移动盒子位置</strong></p><p>实现步骤：</p><ol><li>获取当前盒子位置</li><li>让当前盒子位置加1个移动距离</li><li>利用定时器不断重复这个操作</li><li>加一个定时器结束条件</li><li><strong>注意此元素需要添加定位，才能使用element,stykle.left</strong></li></ol><h2 id="动画函数简单封装"><a href="#动画函数简单封装" class="headerlink" title="动画函数简单封装"></a>动画函数简单封装</h2><p><strong>注意函数需要传递2个参数，动画对象和移动到的距离，并给不同的元素添加不同的定时器</strong></p><pre><code>    function animate(obj, target) &#123;        clearInterval(obj.timer);        obj.timer = setInterval(function () &#123;             var step = (target - obj.offsetLeft) / 10;            step = step &gt; 0 ? Math.ceil(step) : Math.floor(step);            obj.style.left = obj.offsetLeft + step + &#39;px&#39;            if (obj.offsetLeft == target) &#123;                clearInterval(obj.timer);                                 &#125;            &#125;        &#125;, 30)    &#125;</code></pre><h2 id="缓动动画原理"><a href="#缓动动画原理" class="headerlink" title="缓动动画原理##"></a>缓动动画原理##</h2><p>缓动动画就是让元素运动速度有所变化，最常见的就是让速度慢慢停下来。</p><p>思路：</p><ol><li><p>让盒子每次移动的距离慢慢变小，速度就会慢慢降下来。</p></li><li><p>核心算法： （目标值 - 现在的位置）&#x2F; 10 作为每次移动的距离步长</p></li><li><p>停止条件是：让盒子当前位置等于目标位置就停止定时器</p><pre><code> var step = (target - obj.offsetLeft) / 10; step = step &gt; 0 ? Math.ceil(step) : Math.floor(step); obj.style.left = obj.offsetLeft + step + &#39;px&#39;</code></pre></li></ol><h2 id="动画函数添加回调函数"><a href="#动画函数添加回调函数" class="headerlink" title="动画函数添加回调函数"></a>动画函数添加回调函数</h2><p>回调函数原理：函数可以作为一个参数。将这个函数作为一个参数传到另一个函数里面，当那个函数执行完之后，再去执行传进去的这个函数，这个过程叫做回调。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 简单动画函数封装 object目标对象 tarjet目标位置</span><br><span class="line">   // 给不同的动画元素指定了不同的定时器</span><br><span class="line">   function animate(obj, target, callback) &#123;</span><br><span class="line">       clearInterval(obj.timer);</span><br><span class="line">       obj.timer = setInterval(function () &#123;</span><br><span class="line">           // div.style.left = div.offsetLeft + 1 + &#x27;px&#x27;;</span><br><span class="line">           // obj.style.left = obj.offsetLeft + (target - obj.offsetLeft) / 10 + &#x27;px&#x27;; </span><br><span class="line">           var step = (target - obj.offsetLeft) / 10;</span><br><span class="line">           step = step &gt; 0 ? Math.ceil(step) : Math.floor(step);</span><br><span class="line">           obj.style.left = obj.offsetLeft + step + &#x27;px&#x27;</span><br><span class="line">           if (obj.offsetLeft == target) &#123;</span><br><span class="line">               clearInterval(obj.timer);</span><br><span class="line">               //回调函数卸载定时器结束里面</span><br><span class="line">               if (callback) &#123;</span><br><span class="line">                   //调用函数</span><br><span class="line">                   callback();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, 30)</span><br><span class="line">   &#125;</span><br><span class="line">   animate(div, 500, red)</span><br><span class="line">   // 背景变色</span><br><span class="line">   function red() &#123;</span><br><span class="line">       div.style.backgroundColor = &#x27;red&#x27;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="动画函数单独放到JS文件里，需要的时候引用"><a href="#动画函数单独放到JS文件里，需要的时候引用" class="headerlink" title="动画函数单独放到JS文件里，需要的时候引用"></a>动画函数单独放到JS文件里，需要的时候引用</h2>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 网页特效 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM浏览器对象模型</title>
      <link href="/post/de3efe0d.html"/>
      <url>/post/de3efe0d.html</url>
      
        <content type="html"><![CDATA[<h1 id="BOM浏览器对象模型"><a href="#BOM浏览器对象模型" class="headerlink" title="BOM浏览器对象模型"></a>BOM浏览器对象模型</h1><p>学习目标</p><ul><li>能够说出什么是BOM</li><li>能够知道浏览器的顶级对象window</li><li>能够写出页面加载事件以及注意事</li><li>能都写出两种定时器函数并说出区别</li><li>能够说出JS的执行机制</li><li>能够使用location对象完成页面之间的跳转</li><li>能够知晓navigator对象涉及的属性</li><li>能够使用history提供的方法实现页面的刷新</li></ul><h2 id="BOM概述"><a href="#BOM概述" class="headerlink" title="BOM概述"></a>BOM概述</h2><h4 id="什么是BOM"><a href="#什么是BOM" class="headerlink" title="什么是BOM"></a>什么是BOM</h4><p>BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器交互的对象，其核心对象是window。<br>BOM由一系列相关的对象构成，并且每个对象都提供了很多方法与属性。</p><h4 id="BOM的构成"><a href="#BOM的构成" class="headerlink" title="BOM的构成"></a>BOM的构成</h4><p>window对象是浏览器的顶级对象，它具有双重角色</p><ol><li>它是JS访问浏览器窗口的一个接口</li><li>它是一个全局对象。定义在全局作用域中的变量，函数都会变成window对象的属性和方法，在调用的时候可以省略window<br>document\location\navigator\history</li></ol><h2 id="window对象的常见事件"><a href="#window对象的常见事件" class="headerlink" title="window对象的常见事件"></a>window对象的常见事件</h2><h4 id="窗口加载事件"><a href="#窗口加载事件" class="headerlink" title="窗口加载事件"></a>窗口加载事件</h4><pre><code>doument.addEventlistener(&#39;load&#39;,funcatoon()&#123;&#125;);</code></pre><p>load等页面全部加载完毕，包含页面dom元素、图片、css等</p><pre><code>doument.addEventlistener(&#39;DOMContentLoaded&#39;,funcatoon()&#123;&#125;);</code></pre><p>DOMContentLoaded是dom加载完毕，不包含页面dom元素、图片、css等</p><h4 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h4><pre><code>window.onresize = funcatuion()&#123;&#125;;window.addEventListener(&quot;resize&quot;,funcation()&#123;&#125;);</code></pre><p>window.onresize是窗口大小加载事件，当触发时就调用处理函数<br>注意：</p><ol><li>只要窗口大小发生像素变化，就会触发这个事件</li><li>经常利用这个事件完成响应式布局。window.innerWidth当前屏幕的宽度</li></ol><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h4 id="两种定时器"><a href="#两种定时器" class="headerlink" title="两种定时器"></a>两种定时器</h4><ul><li>setTimeout()</li><li>setInterval()</li></ul><h3 id="setTimeout-定时器"><a href="#setTimeout-定时器" class="headerlink" title="setTimeout()定时器"></a>setTimeout()定时器</h3><pre><code>window.setTimeout(调用函数，[延迟的毫秒数]);</code></pre><p>setTimeout()这个调用函数也称为<strong>回调函数</strong></p><ol><li>window在调用时可省略</li><li>延迟时间单位是毫秒，可以省略，默认是0</li><li>调用函数可以直接写函数或函数名</li><li>页面中可能有许多定时器，可以给定时器加标识符（名字）</li></ol><h4 id="停止setTimeout-定时器"><a href="#停止setTimeout-定时器" class="headerlink" title="停止setTimeout()定时器"></a>停止setTimeout()定时器</h4><pre><code>window.clearTimeout(timeoutId);</code></pre><h3 id="setInterval-定时器"><a href="#setInterval-定时器" class="headerlink" title="setInterval()定时器"></a>setInterval()定时器</h3><pre><code>window.setInterval(调用函数，[延迟的毫秒数]);</code></pre><p>setInterval()方法重复调用一个函数，每隔这个时间，就去调用一次回调函数</p><h4 id="停止setInterval-定时器"><a href="#停止setInterval-定时器" class="headerlink" title="停止setInterval()定时器"></a>停止setInterval()定时器</h4><pre><code>window.clearInterval(timeoutId);</code></pre><h2 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h2><ol><li>先执行同步栈中的同步任务</li><li>异步任务（回调函数）放入任务队列中</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行</li></ol><h3 id="JS是单线程"><a href="#JS是单线程" class="headerlink" title="JS是单线程"></a>JS是单线程</h3><p>JS语言最大的特点之一就是单线程，同一时间只能做一件事。</p><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>前一个任务完成后执行后一个任务，程序的执行顺序欲任务的排列顺序一致。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>做一个任务的同时可以做其他任务。</p><p>JS的异步是通过回调函数实现的，一般而言有一下三种类型：</p><ol><li>普通事件，如click、resize等</li><li>资源加载，如load、error等</li><li>定时器，包括setInterval、setTimeOut等</li></ol><p>本质区别：<strong>流水线上各个程序执行顺序不同</strong></p><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><h3 id="什么是location对象"><a href="#什么是location对象" class="headerlink" title="什么是location对象"></a>什么是location对象</h3><p>window对象提供了一个location属性用于获取或设置窗体的URL，并且可以用于解析URL。</p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>统一资源定位符（Uniform Resource Locator,url）是互联网上标准资源的地址。互联网上每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器该怎么处理它</p><h3 id="location对象的方法"><a href="#location对象的方法" class="headerlink" title="location对象的方法"></a>location对象的方法</h3><pre><code>location.assign()  跟href一样，可以跳转页面location.replace() 替换当前页面，因为不记录历史，所以不能后退页面location.reload() 重新加载页面，相当于刷新按钮</code></pre><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>navigator对象包含有关浏览器的信息，有很多属性，最常用的是userAgent，该属性可以返回由客户机发送服务器的user-agent的头部致值。</p><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>window对象给我们提供了一个history对象，与浏览器历史相互交互。该对象包含用户访问过的URL。</p><pre><code>back()    后退forward() 前进go(参数)  前进后退功能，根据参数前进后退    </code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> JS </tag>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/post/5c2fafc7.html"/>
      <url>/post/5c2fafc7.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/idnex.html"/>
      <url>/about/idnex.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/music/idnex.html"/>
      <url>/music/idnex.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/movie/idnex.html"/>
      <url>/movie/idnex.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
