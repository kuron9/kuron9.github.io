<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BOMl浏览器对象模型</title>
      <link href="/post/de3efe0d.html"/>
      <url>/post/de3efe0d.html</url>
      
        <content type="html"><![CDATA[<h1 id="BOM浏览器对象模型"><a href="#BOM浏览器对象模型" class="headerlink" title="BOM浏览器对象模型"></a>BOM浏览器对象模型</h1><p>学习目标</p><ul><li>能够说出什么是BOM</li><li>能够知道浏览器的顶级对象window</li><li>能够写出页面加载事件以及注意事</li><li>能都写出两种定时器函数并说出区别</li><li>能够说出JS的执行机制</li><li>能够使用location对象完成页面之间的跳转</li><li>能够知晓navigator对象涉及的属性</li><li>能够使用history提供的方法实现页面的刷新</li></ul><h2 id="BOM概述"><a href="#BOM概述" class="headerlink" title="BOM概述"></a>BOM概述</h2><h4 id="什么是BOM"><a href="#什么是BOM" class="headerlink" title="什么是BOM"></a>什么是BOM</h4><p>BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器交互的对象，其核心对象是window。<br>BOM由一系列相关的对象构成，并且每个对象都提供了很多方法与属性。</p><h4 id="BOM的构成"><a href="#BOM的构成" class="headerlink" title="BOM的构成"></a>BOM的构成</h4><p>window对象是浏览器的顶级对象，它具有双重角色</p><ol><li>它是JS访问浏览器窗口的一个接口</li><li>它是一个全局对象。定义在全局作用域中的变量，函数都会变成window对象的属性和方法，在调用的时候可以省略window<br>document\location\navigator\history</li></ol><h2 id="window对象的常见事件"><a href="#window对象的常见事件" class="headerlink" title="window对象的常见事件"></a>window对象的常见事件</h2><h4 id="窗口加载事件"><a href="#窗口加载事件" class="headerlink" title="窗口加载事件"></a>窗口加载事件</h4><pre><code>doument.addEventlistener(&#39;load&#39;,funcatoon()&#123;&#125;);</code></pre><p>load等页面全部加载完毕，包含页面dom元素、图片、css等</p><pre><code>doument.addEventlistener(&#39;DOMContentLoaded&#39;,funcatoon()&#123;&#125;);</code></pre><p>DOMContentLoaded是dom加载完毕，不包含页面dom元素、图片、css等</p><h4 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h4><pre><code>window.onresize = funcatuion()&#123;&#125;;window.addEventListener(&quot;resize&quot;,funcation()&#123;&#125;);</code></pre><p>window.onresize是窗口大小加载事件，当触发时就调用处理函数<br>注意：</p><ol><li>只要窗口大小发生像素变化，就会触发这个事件</li><li>经常利用这个事件完成响应式布局。window.innerWidth当前屏幕的宽度</li></ol><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h4 id="两种定时器"><a href="#两种定时器" class="headerlink" title="两种定时器"></a>两种定时器</h4><ul><li>setTimeout()</li><li>setInterval()</li></ul><h3 id="setTimeout-定时器"><a href="#setTimeout-定时器" class="headerlink" title="setTimeout()定时器"></a>setTimeout()定时器</h3><pre><code>window.setTimeout(调用函数，[延迟的毫秒数]);</code></pre><p>setTimeout()这个调用函数也称为<strong>回调函数</strong></p><ol><li>window在调用时可省略</li><li>延迟时间单位是毫秒，可以省略，默认是0</li><li>调用函数可以直接写函数或函数名</li><li>页面中可能有许多定时器，可以给定时器加标识符（名字）</li></ol><h4 id="停止setTimeout-定时器"><a href="#停止setTimeout-定时器" class="headerlink" title="停止setTimeout()定时器"></a>停止setTimeout()定时器</h4><pre><code>window.clearTimeout(timeoutId);</code></pre><h3 id="setInterval-定时器"><a href="#setInterval-定时器" class="headerlink" title="setInterval()定时器"></a>setInterval()定时器</h3><pre><code>window.setInterval(调用函数，[延迟的毫秒数]);</code></pre><p>setInterval()方法重复调用一个函数，每隔这个时间，就去调用一次回调函数</p><h4 id="停止setInterval-定时器"><a href="#停止setInterval-定时器" class="headerlink" title="停止setInterval()定时器"></a>停止setInterval()定时器</h4><pre><code>window.clearInterval(timeoutId);</code></pre><h2 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h2><ol><li>先执行同步栈中的同步任务</li><li>异步任务（回调函数）放入任务队列中</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行</li></ol><h3 id="JS是单线程"><a href="#JS是单线程" class="headerlink" title="JS是单线程"></a>JS是单线程</h3><p>JS语言最大的特点之一就是单线程，同一时间只能做一件事。</p><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>前一个任务完成后执行后一个任务，程序的执行顺序欲任务的排列顺序一致。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>做一个任务的同时可以做其他任务。</p><p>JS的异步是通过回调函数实现的，一般而言有一下三种类型：</p><ol><li>普通事件，如click、resize等</li><li>资源加载，如load、error等</li><li>定时器，包括setInterval、setTimeOut等</li></ol><p>本质区别：<strong>流水线上各个程序执行顺序不同</strong></p><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><h3 id="什么是location对象"><a href="#什么是location对象" class="headerlink" title="什么是location对象"></a>什么是location对象</h3><p>window对象提供了一个location属性用于获取或设置窗体的URL，并且可以用于解析URL。</p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>统一资源定位符（Uniform Resource Locator,url）是互联网上标准资源的地址。互联网上每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器该怎么处理它</p><h3 id="location对象的方法"><a href="#location对象的方法" class="headerlink" title="location对象的方法"></a>location对象的方法</h3><pre><code>location.assign()  跟href一样，可以跳转页面location.replace() 替换当前页面，因为不记录历史，所以不能后退页面location.reload() 重新加载页面，相当于刷新按钮</code></pre><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>navigator对象包含有关浏览器的信息，有很多属性，最常用的是userAgent，该属性可以返回由客户机发送服务器的user-agent的头部致值。</p><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>window对象给我们提供了一个history对象，与浏览器历史相互交互。该对象包含用户访问过的URL。</p><pre><code>back()    后退forward() 前进go(参数)  前进后退功能，根据参数前进后退    </code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/post/5c2fafc7.html"/>
      <url>/post/5c2fafc7.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/idnex.html"/>
      <url>/about/idnex.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/music/idnex.html"/>
      <url>/music/idnex.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/movie/idnex.html"/>
      <url>/movie/idnex.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
